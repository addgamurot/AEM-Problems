# -*- coding: utf-8 -*-
"""Gamurot_M2-L2_Matrices&Determinants.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eLudYTNwaAL-BYb0XHS5I6usnNO52Rve

<font size="5">***Instruction*: Expand Python Modules and Functions section first then run the code below it to avoid NameError when running the code in the Solutions/Code section.**</font>

#**Python Modules and Functions**
-- compiled by addgamurot
"""

import math
import cmath
import sympy as sp
from sympy import pretty_print as pp 
from sympy.interactive import printing
printing.init_printing(use_latex=True)
 
def polar_form(comp_num):
  r = abs(comp_num)
  rad = cmath.phase(comp_num)
  angle = math.degrees(rad)
  polar_form = r, angle
  return polar_form

"""# **<center>Module 2 <center/>**
# <center> **Lesson 2: Applications of Matrices and Determinants** <center/>
Solving Problems about Matrices and Determinants using Python.

##**2.1 Solution of Simultaneous Equations by Matrices**

###**Problem 1.**
Use matrices to solve the simultaneous equations:

$~~~~~~~~~~~x + y + z - 4 = 0 ~~~~~~~~~~~~~~~(1)\\
~~~~~~~~~~~2x - 3y + 4z - 33 = 0 ~~~~~~~ (2)\\
~~~~~~~~~~~3x -2y -2z -2 = 0 ~~~~~~~~~ (3)$

###**Solution/Code/Answer**
"""

eq1 = sp.Function('eq1')
eq2 = sp.Function('eq2')
eq3 = sp.Function('eq3')
 
x, y, z = sp.symbols('x y z')
 
eq1 = sp.Eq(x + y + z, 4)
eq2 = sp.Eq(2*x - 3*y + 4*z, 33)
eq3 = sp.Eq(3*x  - 2*y - 2*z, 2)
print("Find the value of x, y, and z\n")
print("Equations")
display(eq1)
display(eq2)
display(eq3)
print("")
row1 = [1, 1, 1, 4]
row2 = [2, -3, 4, 33]
row3 = [3, -2, -2, 2]
 
 
system = sp.Matrix((row1, row2, row3))
print("Matrix Form")
display(system)
print("")
print("Therefore,")
display(sp.solve_linear_system(system, x, y, z))

"""##**2.2 Solution of Simultaneous Equations by Determinants**

###**Problem 2.**
Solve the following simultaneous equations using determinants:

$~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~3x - 4y = 12 \\
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~7x + 5y = 6.5 
$

###**Solution/Code/Answer**
"""

eq1 = sp.Function('eq1')
eq2 = sp.Function('eq2')
eq3 = sp.Function('eq3')
eq4 = sp.Function('eq4')
 
x, y = sp.symbols('x y ')
 
eq1 = sp.Eq(3*x - 4*y, 12)
eq2 = sp.Eq(7*x + 5*y, 6.5)
 
print("Find the value of x and y\n")
print("Equations")
display(eq1)
display(eq2)
 
print("")
row1 = [3, -4, -12]
row2 = [7, 5, -6.5]
 
system = sp.Matrix((row1, row2))
print("Matrix Form")
display(system)
print("")
 
print("Finding the determinants Dx Dy and D,\n")
Dx_matrix = sp.Matrix([[system[1], system[2]], [system[4], system[5]]])
Dx = int(Dx_matrix.det())
print("for Dx,")
display(Dx_matrix)
print("Dx =", Dx)
 
Dy_matrix = sp.Matrix([[system[0], system[2]], [system[3], system[5]]])
Dy = round(Dy_matrix.det(), 1)
print("\nfor Dy,")
display(Dy_matrix)
print("Dy =", Dy)
 
D_matrix = sp.Matrix([[system[0], system[1]], [system[3], system[4]]])
D = int(D_matrix.det())
print("\nfor D,")
display(Dy_matrix)
print("D =", D)
 
 
 
eq3 = sp.Eq((x/Dx) , 1/D)
eq4 = sp.Eq(-(y/Dy), 1/D)
print("\nfor x,")
display(sp.solveset(eq3, x))
print("\nfor y,")
display(sp.solveset(eq4, y))
 
print('\nTherefore, x = 2 & y = -1.5')

"""###**Problem 3.**
The velocity of a car, accelerating at uniform acceleration between two points, is given by $v = u + at$, where $u$ is its velocity when passing the first point and $t$ is the time taken to pass between the two points. If $v = 21 m/s$ when $t = 3.5s$ and $v = 33m/s$ and $t = 6.1s$, use the determinants to find the values of $u$ and $a$, each correct to 4 significant figures.

###**Solution/Code/Answer**
"""

eq1 = sp.Function('eq1')
eq2 = sp.Function('eq2')
eq3 = sp.Function('eq3')
eq4 = sp.Function('eq4')

u, a = sp.symbols('u a')

eq1 = sp.Eq(u + 3.5*a, 21)
eq2 = sp.Eq(u + 6.1*a, 33)

print("Find the value of u and a\n")
print("Substituting the given values in v = u + at gives:")
print("Writing the equations in the ax + by + d = form gives:")
display(eq1)
display(eq2)

print("")
row1 = [1, 3.5, -21]
row2 = [1, 6.1, -33]

system = sp.Matrix((row1, row2))
print("Matrix Form")
display(system)
print("")

print("Finding the determinants Du Da and D,\n")
Du_matrix = sp.Matrix([[system[1], system[2]], [system[4], system[5]]])
Du = Du_matrix.det()
print("for Du,")
display(Du_matrix)
print("Du =", Du)

Da_matrix = sp.Matrix([[system[0], system[2]], [system[3], system[5]]])
Da = Da_matrix.det()
print("\nfor Da,")
display(Da_matrix)
print("Da =", Da)

D_matrix = sp.Matrix([[system[0], system[1]], [system[3], system[4]]])
D = D_matrix.det()
print("\nfor D,")
display(D_matrix)
print("D =", D)

eq3 = sp.Function('eq3')

eq3 = sp.Eq((u/Du) , 1/D)
eq4 = sp.Eq(-(a/Da), 1/D)
print("\nfor u in m/s^2,")
display(sp.solveset(eq3, u))
print("\nfor a in m/s^2,")
display(sp.solveset(eq4, a))

"""###**Problem 4.**
Applying Kirchhoff's laws to an electric circuit results in the following equations:

$
(9 + j12)I_1 - (6 + j8)I_2 = 5 \\
-(6 - j8)I_1 + (8 + j3)I_2 = (2 + j4)
$

Solve the equations for $I_1$ and $I_2$

###**Solution/Code/Answer**
"""

eq1 = sp.Function('eq1')
eq2 = sp.Function('eq2')
eq3 = sp.Function('eq3')
eq4 = sp.Function('eq4')

I1, I2 = sp.symbols('I1 I2')

eq1 = sp.Eq((9+12j)*I1 - (6 + 8j)*I2 - 5, 0)
eq2 = sp.Eq(-(6+8j)*I1 + (8+3j)*I2 -(2+4j), 0)

print("Find the value of I1 and I2\n")
print("Writing the equations in the ax + by + d = form gives:")
display(eq1)
display(eq2)

print("")
row1 = [9+12j, -(6 + 8j), -5]
row2 = [-(6+8j), (8+3j), -(2+4j)]

system = sp.Matrix((row1, row2))
print("Matrix Form")
display(system)
print("")

print("Finding the determinants DI1 DI2 and D,\n")
DI1_matrix = sp.Matrix([[system[1], system[2]], [system[4], system[5]]])
DI1 = DI1_matrix.det()
print("for DI1,")
display(DI1_matrix)
print("DI1 =", DI1)

DI2_matrix = sp.Matrix([[system[0], system[2]], [system[3], system[5]]])
DI2 = DI2_matrix.det()
print("\nfor DI2,")
display(DI2_matrix)
print("DI2 =", DI2)

D_matrix = sp.Matrix([[system[0], system[1]], [system[3], system[4]]])
D = D_matrix.det()
print("\nfor D,")
display(D_matrix)
print("D =", D)


i1 = DI1/D
a = polar_form(i1)
print("\nfor I1 in polar form,")
display(a)

i2 = DI2/D
b = polar_form(i2)
print("\nfor I2 in polar form,")
display(b)

"""###**Problem 5.**
A d.c circuit comprises three closed loops. Applying Kirchhoff's laws to the closed loops gives the following equations for current flow in milliamperes:

$~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2I_1 + 3I_2 - 4I_3 = 26 \\
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~I_1 - 5I_2 - 3I_3 = -87 \\
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-7I_1 + 2I_2 + 6I_3 = 12
$

Use determinants to solve for $I_1$, $I_2$ and $I_3$

###**Solution/Code/Answer**
"""

eq1 = sp.Function('eq1')
eq2 = sp.Function('eq2')
eq3 = sp.Function('eq3')
eq4 = sp.Function('eq4')
eq5 = sp.Function('eq5')

I1, I2, I3 = sp.symbols('I1 I2 I3')

eq1 = sp.Eq(2*I1 + 3*I2 - 4*I3 - 26, 0)
eq2 = sp.Eq(I1 - 5*I2 - 3*I3 + 87, 0)
eq3 = sp.Eq(-7*I1 + 2*I2 + 6*I3 - 12, 0)

print("Find the value of I1,  I2 and I3\n")
print("Writing the equations in the ax + by + cz + d = 0 form gives:")
display(eq1)
display(eq2)
display(eq3)

print("")
row1 = [2, 3, -4, -26]
row2 = [1, -5, -3, 87]
row3 = [-7, 2, 6, -12]

system = sp.Matrix((row1, row2, row3))
print("Matrix Form")
display(system)
print("")



print("Finding the determinants DI1, DI2, DI3 and D,\n")
# For DI1 Matrix
DI1_row1 = [system[1], system[2], system[3]]
DI1_row2 = [system[5], system[6], system[7]]
DI1_row3 = [system[9], system[10], system[11]]

DI1_matrix = sp.Matrix((DI1_row1, DI1_row2, DI1_row3))
DI1 = DI1_matrix.det()
print("for DI1,")
display(DI1_matrix)
print("DI1 =", DI1)

# For DI2 Matrix
DI2_row1 = [system[0], system[2], system[3]]
DI2_row2 = [system[4], system[6], system[7]]
DI2_row3 = [system[8], system[10], system[11]]

DI2_matrix = sp.Matrix((DI2_row1, DI2_row2, DI2_row3))
DI2 = DI2_matrix.det()
print("\nfor DI2,")
display(DI2_matrix)
print("DI2 =", DI2)

# For DI3 Matrix
DI3_row1 = [system[0], system[1], system[3]]
DI3_row2 = [system[4], system[5], system[7]]
DI3_row3 = [system[8], system[9], system[11]]

DI3_matrix = sp.Matrix((DI3_row1, DI3_row2, DI3_row3))
DI3 = DI3_matrix.det()
print("\nfor DI3,")
display(DI3_matrix)
print("DI3 =", DI3)

# For D Matrix
D_row1 = [system[0], system[1], system[2]]
D_row2 = [system[4], system[5], system[6]]
D_row3 = [system[8], system[9], system[10]]

D_matrix = sp.Matrix((D_row1, D_row2, D_row3))
D = D_matrix.det()
print("\nfor D,")
display(D_matrix)
print("D =", D)


eq3 = sp.Eq((I1/DI1) , -1/D)
eq4 = sp.Eq(-(I2/DI2), -1/D)
eq5 = sp.Eq((I3/DI3), -1/D)
print("\nfor I1 in mA,")
display(sp.solveset(eq3, I1))
print("\nfor I2 in mA,")
display(sp.solveset(eq4, I2))
print("\nfor I3 in mA,")
display(sp.solveset(eq5, I3))

"""##**2.3 Solution of Simultaneous Equations Using Cramer's Rule**

###**Problem 6.**
Solve the following simultaneous equations using Cramer's rule.

$
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~x + y + z = 4 \\
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~2x - 3y + 4z = 33 \\
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~3x - 2y - 2z = 2
$

###**Solution/Code/Answer**
"""

eq1 = sp.Function('eq1')
eq2 = sp.Function('eq2')
eq3 = sp.Function('eq3')
eq4 = sp.Function('eq4')
eq5 = sp.Function('eq5')

x, y, z = sp.symbols('x y z')

eq1 = sp.Eq(x + y + z, 4)
eq2 = sp.Eq(2*x - 3*y + 4*z, 33)
eq3 = sp.Eq(3*x - 2*y - 2*z, 2)

print("Find the value of x,  y and z\n")
print("Writing the equations in the ax + by + cz = d form gives:")
display(eq1)
display(eq2)
display(eq3)

print("")
row1 = [1, 1, 1, 4]
row2 = [2, -3, 4, 33]
row3 = [3, -2, -2, 2]

system = sp.Matrix((row1, row2, row3))
print("Matrix Form")
display(system)
print("")



print("Finding the determinants Dx, Dy, Dz and D,\n")
# For Dx Matrix
Dx_row1 = [system[3], system[1], system[2]]
Dx_row2 = [system[7], system[5], system[6]]
Dx_row3 = [system[11], system[9], system[10]]

Dx_matrix = sp.Matrix((Dx_row1, Dx_row2, Dx_row3))
Dx = Dx_matrix.det()
print("for Dx,")
display(Dx_matrix)
print("Dx =", Dx)

# For Dy Matrix
Dy_row1 = [system[0], system[3], system[2]]
Dy_row2 = [system[4], system[7], system[6]]
Dy_row3 = [system[8], system[11], system[10]]

Dy_matrix = sp.Matrix((Dy_row1, Dy_row2, Dy_row3))
Dy = Dy_matrix.det()
print("\nfor Dy,")
display(Dy_matrix)
print("Dy =", Dy)

# For Dz Matrix
Dz_row1 = [system[0], system[1], system[3]]
Dz_row2 = [system[4], system[5], system[7]]
Dz_row3 = [system[8], system[9], system[11]]

Dz_matrix = sp.Matrix((Dz_row1, Dz_row2, Dz_row3))
Dz = Dz_matrix.det()
print("\nfor Dz,")
display(Dz_matrix)
print("Dz =", Dz)

# For D Matrix
D_row1 = [system[0], system[1], system[2]]
D_row2 = [system[4], system[5], system[6]]
D_row3 = [system[8], system[9], system[10]]

D_matrix = sp.Matrix((D_row1, D_row2, D_row3))
D = D_matrix.det()
print("\nfor D,")
display(D_matrix)
print("D =", D)


eq3 = sp.Eq(Dx/D, x)
eq4 = sp.Eq(Dy/D, y)
eq5 = sp.Eq(Dz/D, z)
print("\nfor x,")
display(sp.solveset(eq3, x))
print("\nfor y,")
display(sp.solveset(eq4, y))
print("\nfor z,")
display(sp.solveset(eq5, z))

"""##**2.4 Solution of Simultaneous Equations Using Gaussian Elimination Method**

###**Problem 7.**

###**Solution/Code/Answer**
A d.c circuit comprises three closed loops. Applying Kirchhoff's laws to the closed loops gives the following equations for current flow in milliamperes:

$~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2I_1 + 3I_2 - 4I_3 = 26 \\
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~I_1 - 5I_2 - 3I_3 = -87 \\
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-7I_1 + 2I_2 + 6I_3 = 12
$

Use the Gaussian elimination method to solve for $I_1$, $I_2$ and $I_3$
"""

eq1 = sp.Function('eq1')
eq2 = sp.Function('eq2')
eq3 = sp.Function('eq3')
eq4 = sp.Function('eq4')
eq5 = sp.Function('eq5')

I1, I2, I3 = sp.symbols('I1 I2 I3')

eq1 = sp.Eq(2*I1 + 3*I2 - 4*I3 - 26, 0)
eq2 = sp.Eq(I1 - 5*I2 - 3*I3 + 87, 0)
eq3 = sp.Eq(-7*I1 + 2*I2 + 6*I3 - 12, 0)

print("Find the value of I1,  I2 and I3\n")
print("Writing the equations in the ax + by + cz + d = 0 form gives:")
display(eq1)
display(eq2)
display(eq3)

print("")
row1 = [2, 3, -4, -26]
row2 = [1, -5, -3, 87]
row3 = [-7, 2, 6, -12]

system = sp.Matrix((row1, row2, row3))
print("Matrix Form")
display(system)
print("")

DI1_row1 = [system[1], system[2], system[3]]
DI1_row2 = [system[5], system[6], system[7]]
DI1_row3 = [system[9], system[10], system[11]]

DI1_matrix = sp.Matrix((DI1_row1, DI1_row2, DI1_row3))
DI1 = DI1_matrix.det()



DI2_row1 = [system[0], system[2], system[3]]
DI2_row2 = [system[4], system[6], system[7]]
DI2_row3 = [system[8], system[10], system[11]]

DI2_matrix = sp.Matrix((DI2_row1, DI2_row2, DI2_row3))
DI2 = DI2_matrix.det()



DI3_row1 = [system[0], system[1], system[3]]
DI3_row2 = [system[4], system[5], system[7]]
DI3_row3 = [system[8], system[9], system[11]]

DI3_matrix = sp.Matrix((DI3_row1, DI3_row2, DI3_row3))
DI3 = DI3_matrix.det()



D_row1 = [system[0], system[1], system[2]]
D_row2 = [system[4], system[5], system[6]]
D_row3 = [system[8], system[9], system[10]]

D_matrix = sp.Matrix((D_row1, D_row2, D_row3))
D = D_matrix.det()



eq3 = sp.Eq((I1/DI1) , -1/D)
eq4 = sp.Eq(-(I2/DI2), -1/D)
eq5 = sp.Eq((I3/DI3), -1/D)
print("\nfor I1 in mA,")
display(sp.solveset(eq3, I1))
print("\nfor I2 in mA,")
display(sp.solveset(eq4, I2))
print("\nfor I3 in mA,")
display(sp.solveset(eq5, I3))

"""##**2.5 Eigenvalues and Eigenvectors**

###**Problem 8.**
Determine the eigenvalues of the matrix $A = \begin{pmatrix}
1 & 2 & 1 \\
6 & -1 & 0 \\
-1 & -2 & -1
\end{pmatrix}$

###**Solution/Code/Answer**
"""

row1 = [1, 2, 1]
row2 = [6, -1, 0]
row3 = [-1, -2, -1]
A = sp.Matrix((row1, row2, row3))
display(A)
print('')
display(A.eigenvals())
print('Therefore the eigenvalues of matrix A are - 4, 0 and 3')

"""###**Problem 9.**
Determine the eigenvectors of the matrix $A = \begin{pmatrix}
1 & 2 & 1 \\
6 & -1 & 0 \\
-1 & -2 & -1
\end{pmatrix}$

###**Solution/Code/Answer**
"""

row1 = [1, 2, 1]
row2 = [6, -1, 0]
row3 = [-1, -2, -1]
A = sp.Matrix((row1, row2, row3))
display(A)
print('')
print('Therefore the eigenvalues  of matrix A are - 4, 0, 3 and the eigenvectors are shown for each the eigenvalues')
display(A.eigenvects())

"""#Summary
<div align="justify"><font size="3">For this module, the sympy library is used to perform symbolic or algebraic calculations .In this lesson, which is about matrices, determinants, eigenvalues and eigenvectors, sympy contains functions necessary for matrix calculations . </font></div>   

---

#<center>$---$End of Module 2, Lesson 2$---$<center/>
"""